create table "public"."analytics" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "page" text default ''::text,
    "user" json
);
alter table "public"."analytics" enable row level security;
create table "public"."projects" (
    "id" bigint generated by default as identity not null,
    "createdAt" timestamp with time zone not null default now(),
    "isVisible" boolean not null default false,
    "slug" character varying default ''::character varying,
    "name" jsonb,
    "title" jsonb,
    "description" jsonb
);
alter table "public"."projects" enable row level security;
alter table "public"."hat" enable row level security;
CREATE UNIQUE INDEX analytics_pkey ON public.analytics USING btree (id);
CREATE UNIQUE INDEX projects_pkey ON public.projects USING btree (id);
CREATE UNIQUE INDEX projects_slug_key ON public.projects USING btree (slug);
alter table "public"."analytics" add constraint "analytics_pkey" PRIMARY KEY using index "analytics_pkey";
alter table "public"."projects" add constraint "projects_pkey" PRIMARY KEY using index "projects_pkey";
alter table "public"."projects" add constraint "projects_slug_key" UNIQUE using index "projects_slug_key";
grant delete on table "public"."analytics" to "anon";
grant insert on table "public"."analytics" to "anon";
grant references on table "public"."analytics" to "anon";
grant select on table "public"."analytics" to "anon";
grant trigger on table "public"."analytics" to "anon";
grant truncate on table "public"."analytics" to "anon";
grant update on table "public"."analytics" to "anon";
grant delete on table "public"."analytics" to "authenticated";
grant insert on table "public"."analytics" to "authenticated";
grant references on table "public"."analytics" to "authenticated";
grant select on table "public"."analytics" to "authenticated";
grant trigger on table "public"."analytics" to "authenticated";
grant truncate on table "public"."analytics" to "authenticated";
grant update on table "public"."analytics" to "authenticated";
grant delete on table "public"."analytics" to "service_role";
grant insert on table "public"."analytics" to "service_role";
grant references on table "public"."analytics" to "service_role";
grant select on table "public"."analytics" to "service_role";
grant trigger on table "public"."analytics" to "service_role";
grant truncate on table "public"."analytics" to "service_role";
grant update on table "public"."analytics" to "service_role";
grant delete on table "public"."projects" to "anon";
grant insert on table "public"."projects" to "anon";
grant references on table "public"."projects" to "anon";
grant select on table "public"."projects" to "anon";
grant trigger on table "public"."projects" to "anon";
grant truncate on table "public"."projects" to "anon";
grant update on table "public"."projects" to "anon";
grant delete on table "public"."projects" to "authenticated";
grant insert on table "public"."projects" to "authenticated";
grant references on table "public"."projects" to "authenticated";
grant select on table "public"."projects" to "authenticated";
grant trigger on table "public"."projects" to "authenticated";
grant truncate on table "public"."projects" to "authenticated";
grant update on table "public"."projects" to "authenticated";
grant delete on table "public"."projects" to "service_role";
grant insert on table "public"."projects" to "service_role";
grant references on table "public"."projects" to "service_role";
grant select on table "public"."projects" to "service_role";
grant trigger on table "public"."projects" to "service_role";
grant truncate on table "public"."projects" to "service_role";
grant update on table "public"."projects" to "service_role";
create policy "Insert for anons"
on "public"."analytics"
as permissive
for insert
to anon
with check (true);
create policy "Only admin can select"
on "public"."analytics"
as permissive
for select
to authenticated, postgres, supabase_admin, supabase_auth_admin
using (true);
create policy "Policy with security definer functions"
on "public"."hat"
as permissive
for all
to public
using (true);
create policy "Enable read access for all users"
on "public"."projects"
as permissive
for select
to public
using (true);
create policy "Policy with security definer functions"
on "public"."projects"
as permissive
for all
to authenticated
using (true);
